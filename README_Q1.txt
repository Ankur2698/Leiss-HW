This program is for producing the solutions to the particular Tower of Hanoi problem whose mapping was described as {(Start, Aux1), (Aux1, Aux2), (Aux2, Aux3), (Aux3, Aux4), (Aux4, Aux1), (Aux1, Dest)}. It is designed to create solutions for 10 different inputs of disks, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} which have been hard-coded. It does not take any input from the user.
Since the solution for this Tower of Hanoi when there is only 1 disk is just 2 moves, the hard-coded solution is simply written to the output file. But, in general, for each of the rest of the inputs, i.e. for 2 disks through 10 disks:
The program will print out the moves for n-1 (top) disks from peg “Start” to peg “Aux3” using the “move2” function. Then it will print out the move of the n-th (last) disk from peg “Start” to peg “Aux1” and another move from “Aux1” to “Dest”. After that, the program will print out the moves for the n-1 disks from peg “Aux3” to peg “Dest” using the “move2” function again.
All of the moves are printed in an output file called "Tower of Hanoi Solutions.txt".

The recursive “move2” function is the heart of the program which moves n disks 2 pegs over, i.e. from one peg to the next peg and from that peg to the target peg. It works by splitting the task of moving n disks into smaller versions of the same task for n-1 pegs with each successive call doing the same till a base case is reached. Since the recursive algorithm is based on a rotation of the pegs in the next “move2” call, the program needs to pass the names of the pegs, i.e. strings representing each peg that needs to be passed to the next call. The algorithm also passes an int variable by reference to function as a global variable that keeps track of the number of disks inside the loop of the graph which is needed to determine whether a disk needs o be brought into the loop from peg “Start” or out of the loop to peg “Dest”. A boolean is used to differentiate whether the “move2” call is for beginning at peg “Start”, i.e. from peg “Start” to peg “Aux3”, or ending at peg “Dest”, i.e. from peg “Aux3” to peg “Dest”.
